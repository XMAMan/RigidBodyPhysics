<UserControl x:Class="BridgeBuilderControl.Controls.Simulator.SimulatorControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:BridgeBuilderControl.Controls.Simulator"
             xmlns:wpfControls="clr-namespace:WpfControls.Controls;assembly=WpfControls"
             xmlns:converter="clr-namespace:WpfControls.Converter;assembly=WpfControls"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
        <Grid.Resources>
            <!-- Mit diesen Style kann ich ein Button ohne Mouse-Hover-Effekt erzeugen -->
            <Style TargetType="Button"  x:Key="NoMouseOverButtonStyle"  >
                <Setter Property="Foreground" Value="Gray"/>
                <Setter Property="Background" Value="#01000000"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Grid Background="{TemplateBinding Background}">
                                <ContentPresenter />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="White"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            
            <!-- Mit diesen Style bekommt ein Label ein MouseHover-Effekt-->
            <Style TargetType="Label"  x:Key="MouseOverLabelStyle"  >
                <Setter Property="Foreground" Value="Gray"/>
                
                <!-- Damit das Label anklickbar ist, darf es nur 99% Transparent sein --> 
                <Setter Property="Background" Value="#01000000"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Foreground" Value="White"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <converter:BoolToVisibilityConverter x:Key="FalseToVisibleConverter" TrueValue="Collapsed" FalseValue="Visible" />
            <converter:BoolToVisibilityConverter x:Key="FalseToCollapsedConverter" TrueValue="Visible" FalseValue="Collapsed" />
        </Grid.Resources>
        <!-- So kann ich Buttons über dem GraphicControl anbringen. Das Grid ist Transparent und genau so groß wie das GraphicControl -->
        <wpfControls:AirspacePopup PlacementTarget="{Binding ElementName=graphicControlBorder}"
                         FollowPlacementTarget="True"
                         AllowOutsideScreenPlacement="True"
                         ParentWindow="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                         IsOpen="True"
                         AllowsTransparency="True"
                         Placement="Center"
                         Width="{Binding ElementName=graphicControlBorder, Path=ActualWidth}"
                         Height="{Binding ElementName=graphicControlBorder, Path=ActualHeight}">
            <Grid>
                <Button Content="Edit" 
                        Command="{Binding EditClick}" 
                        HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10 5 0 0" 
                        FontSize="30"  FontFamily="Adobe Caslon Pro" 
                        Style="{StaticResource  NoMouseOverButtonStyle}"
                        />


                <Button Content="Run Train" 
                        Command="{Binding RunTrainClick}" 
                        Visibility = "{Binding TrainIsRunning, Converter={StaticResource FalseToVisibleConverter}}"
                        HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0 5 10 0" 
                        FontSize="30"  FontFamily="Adobe Caslon Pro" 
                        Style="{StaticResource  NoMouseOverButtonStyle}"
                        />

                <StackPanel Orientation="Horizontal" 
                            HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0 5 10 0"
                            Visibility = "{Binding TrainIsRunning, Converter={StaticResource FalseToCollapsedConverter}}"
                            >
                    <Button Content="Pause" 
                        Command="{Binding PauseClick}" 
                        Visibility = "{Binding SimulationIsRunning, Converter={StaticResource FalseToCollapsedConverter}}"
                        FontSize="30"  FontFamily="Adobe Caslon Pro" 
                        Style="{StaticResource  NoMouseOverButtonStyle}"
                        />

                    <Button Content="Resume" 
                        Command="{Binding ResumeClick}" 
                        Visibility = "{Binding SimulationIsRunning, Converter={StaticResource FalseToVisibleConverter}}"
                        FontSize="30"  FontFamily="Adobe Caslon Pro" 
                        Style="{StaticResource  NoMouseOverButtonStyle}"
                        />
                </StackPanel>

                <Label Content="Level Passed" 
                       Foreground="Green" Background="#01000000" 
                       Visibility = "{Binding TrainHasPassedTheBridge, Converter={StaticResource FalseToCollapsedConverter}}"
                       HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="60"  FontFamily="Adobe Caslon Pro" FontWeight="Bold"/>

                <Label Content="Level Failed" 
                       Foreground="Red" Background="#01000000" 
                       Visibility = "{Binding TrainIsFallenIntoWater, Converter={StaticResource FalseToCollapsedConverter}}"
                       HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="60"  FontFamily="Adobe Caslon Pro" FontWeight="Bold"/>


                <Label Content="{Binding ForceText}" 
                       Foreground="Blue" Background="#01000000"      
                       Visibility = "{Binding ShowForceText, Converter={StaticResource FalseToCollapsedConverter}}"
                       HorizontalAlignment="Center" VerticalAlignment="Top" Margin="10 5 0 0" FontSize="30"  FontFamily="Adobe Caslon Pro"/>


                <Button Content="Stress" 
                        Command="{Binding StressClick}" 
                        HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0 0 10 -5" 
                        FontSize="30"  FontFamily="Adobe Caslon Pro" 
                        Style="{StaticResource  NoMouseOverButtonStyle}"
                        />

                <Label Content="Zoom In" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10 50 0 0" FontSize="30"  FontFamily="Adobe Caslon Pro" Style="{StaticResource  MouseOverLabelStyle}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding ZoomInMouseDown}" />
                        </i:EventTrigger>
                        <i:EventTrigger EventName="MouseUp">
                            <i:InvokeCommandAction Command="{Binding ZoomInMouseUp}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Label>
                <Label Content="Zoom Out" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10 75 0 0" FontSize="30"  FontFamily="Adobe Caslon Pro" Style="{StaticResource  MouseOverLabelStyle}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDown">
                            <i:InvokeCommandAction Command="{Binding ZoomOutMouseDown}" />
                        </i:EventTrigger>
                        <i:EventTrigger EventName="MouseUp">
                            <i:InvokeCommandAction Command="{Binding ZoomOutMouseUp}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Label>

            </Grid>
        </wpfControls:AirspacePopup>

        <Border BorderThickness="5" BorderBrush="DarkBlue" x:Name="graphicControlBorder"/>
    </Grid>
</UserControl>
